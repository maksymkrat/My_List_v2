@page "/compose-words"
@using System.Text
@inject IBusinessLogic _business;

    
<div class="container">
    <div class="row  justify-content-center m-4">
        
        <div class="col-6 main-word">
            <span>@mainWord.Translation</span>
        </div>
       


    </div>
    @if (resultWord.Count == 0)
    {
        <div class="empty-div-result-word">
            
        </div>
    }
    else
    {
        <div class="row  justify-content-center">
            @foreach (var item in resultWord)
            {
                <div class="result-word text-center alert alert-@ResultStyle" @onclick="(() => {DeleteCharWithResult(item);})">
                    <span>@item</span>
                </div> 
            }
        </div>
    }
   
    @if (mixedСharacters.Count == 0)
    {
        <div class="col empty-div-mixed-chars">
            
        </div>
    }
    else
    {
        <div class="col d-flex justify-content-center">
            @foreach (var item in mixedСharacters)
            {
                <div class="col hovered-word" @onclick="(() => {AddCharForResult(item);})">
                    <span>@item</span>
                </div> 
            }
       
        </div>
    }
    
   
    
   
    
    <div class="row ">
        <div class="col-6">
        </div>
        <div class="col-6 text-center">
            <button class="btn-next-test " @onclick="ResetWord">Next test</button>
        </div>
    </div>
    
    <div class="row ">
        <div class="col-6">
        </div>
        <div class="col-6 text-center">
            <button class="btn-next-test " @onclick="CompareWords">Verify</button>
        </div>
    </div>
    
</div>
   
    @if (mixedСharacters.Count == 0)
    {
        CompareWords();
    }
@code {
    string ResultStyle ;
    Random random = new Random();
    Word mainWord;
    List<char> resultWord = new List<char>();
    List<char> mixedСharacters = new List<char>();

    


    protected override void OnInitialized()
    {
        mainWord = _business.GetRandomWord();
        char[] arrayChars = mainWord.WordText.ToCharArray();
        mixedСharacters = arrayChars.OrderBy(x => random.Next()).ToList();
        resultWord.Clear();
        ResultStyle = "light";
    }

    void ResetWord()
    {
       OnInitialized();
        
    }

    void AddCharForResult(char selectChar)
    {
        resultWord.Add(selectChar);
        mixedСharacters.Remove(selectChar);
        ResultStyle = "light";
    }

    void DeleteCharWithResult(char selectChar)
    {
        resultWord.Remove(selectChar);
        mixedСharacters.Add(selectChar);
        ResultStyle = "light";
       
    }

    void CompareWords()
    {
        StringBuilder blindWord = new StringBuilder();
       
            for (int i = 0; i < resultWord.Count; i++)
        {
            blindWord.Append(resultWord[i]);
        }
        if (blindWord.ToString().Equals(mainWord.WordText))
        {
            ResultStyle = "success";
           
            

        }else
        {
            ResultStyle = "danger";
            

        }
    }

}